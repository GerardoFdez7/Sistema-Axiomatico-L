#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de Demostraci√≥n para la Presentaci√≥n
Sistema Axiom√°tico L - Reconocedor de Expresiones Proposicionales

Este script ejecuta demostraciones organizadas para cada secci√≥n de la presentaci√≥n.
"""

import sys
import time
from analizador_lexico import analizar_lexicamente
from analizador_sintactico import analizar_sintacticamente, imprimir_arbol
from generador_grafos import visualizar_grafo, generar_reporte_grafo, exportar_grafo_dot
from automata_finito import crear_automata_alfabeto, generar_tabla_transiciones
from gramatica_sistema_L import mostrar_gramatica_formal
from main import limpiar_nombre_archivo

def pausa(mensaje="Presiona Enter para continuar..."):
    """Pausa la ejecuci√≥n para permitir explicaciones"""
    input(f"\n{mensaje}")

def separador(titulo):
    """Imprime un separador visual"""
    print("\n" + "="*60)
    print(f"  {titulo}")
    print("="*60)

def demo_introduccion():
    """Demostraci√≥n para Alex - Introducci√≥n"""
    separador("DEMO 1: INTRODUCCI√ìN AL SISTEMA")
    
    print("\nüéØ OBJETIVO DEL PROYECTO:")
    print("   Reconocedor completo de expresiones del c√°lculo proposicional")
    
    print("\nüìö ALFABETO DEL SISTEMA L:")
    print("   ‚Ä¢ Variables: p, q, r, s, t, u, v, w, x, y, z")
    print("   ‚Ä¢ Operadores: ~, ^, o, =>, <=>")
    print("   ‚Ä¢ Par√©ntesis: ( )")
    print("   ‚Ä¢ Constantes: 0, 1")
    
    print("\nüõ†Ô∏è TECNOLOG√çAS UTILIZADAS:")
    print("   ‚Ä¢ Python 3.x")
    print("   ‚Ä¢ PLY (Python Lex-Yacc) - An√°lisis l√©xico y sint√°ctico")
    print("   ‚Ä¢ NetworkX - Generaci√≥n de grafos")
    print("   ‚Ä¢ Matplotlib - Visualizaci√≥n")
    
    print("\n‚ú® FUNCIONALIDADES PRINCIPALES:")
    print("   1. An√°lisis l√©xico (tokenizaci√≥n)")
    print("   2. An√°lisis sint√°ctico (validaci√≥n gramatical)")
    print("   3. Generaci√≥n de grafos dirigidos")
    print("   4. Visualizaci√≥n de aut√≥matas finitos")
    
    pausa("Alex: Explica el contexto y objetivos...")

def demo_analisis_lexico():
    """Demostraci√≥n para Juan Diego - An√°lisis L√©xico"""
    separador("DEMO 2: AN√ÅLISIS L√âXICO")
    
    expresiones_demo = [
        "p",
        "(p^q)",
        "p=>q",
        "(p<=>~r)"
    ]
    
    print("\nüîç TOKENIZACI√ìN DE EXPRESIONES:")
    print("\nEl analizador l√©xico convierte texto en tokens...")
    
    for expr in expresiones_demo:
        print(f"\nüìù Expresi√≥n: '{expr}'")
        tokens = analizar_lexicamente(expr)
        print("   Tokens generados:")
        for i, (tipo, valor) in enumerate(tokens, 1):
            print(f"      {i}. {tipo:12} -> '{valor}'")
        
        if expr != expresiones_demo[-1]:
            pausa("Continuar con siguiente expresi√≥n...")
    
    print("\nüí° CARACTER√çSTICAS DEL ANALIZADOR L√âXICO:")
    print("   ‚Ä¢ Reconoce operadores multi-car√°cter (=>, <=>)")
    print("   ‚Ä¢ Valida caracteres del alfabeto")
    print("   ‚Ä¢ Detecta errores l√©xicos")
    print("   ‚Ä¢ Genera secuencia de tokens para an√°lisis sint√°ctico")
    
    pausa("Juan Diego: Explica el proceso de tokenizaci√≥n...")

def demo_analisis_sintactico():
    """Demostraci√≥n para Diego - An√°lisis Sint√°ctico"""
    separador("DEMO 3: AN√ÅLISIS SINT√ÅCTICO")
    
    expresion_demo = "((p=>q)^p)"
    
    print(f"\nüå≥ AN√ÅLISIS SINT√ÅCTICO DE: '{expresion_demo}'")
    print("\nLa gram√°tica del Sistema L define 9 producciones:")
    print("   P1: F ‚Üí E")
    print("   P2: E ‚Üí VARIABLE")
    print("   P3: E ‚Üí CONSTANTE")
    print("   P4: E ‚Üí ~ E")
    print("   P5: E ‚Üí E ^ E")
    print("   P6: E ‚Üí E o E")
    print("   P7: E ‚Üí E => E")
    print("   P8: E ‚Üí E <=> E")
    print("   P9: E ‚Üí ( E )")
    
    pausa("Continuar con an√°lisis...")
    
    print(f"\nüîç Analizando '{expresion_demo}'...")
    ast, grafo = analizar_sintacticamente(expresion_demo)
    
    if ast:
        print("\n‚úÖ Expresi√≥n V√ÅLIDA")
        print("\nüìä √ÅRBOL SINT√ÅCTICO GENERADO:")
        imprimir_arbol(ast)
        
        print("\nüìà PRECEDENCIA DE OPERADORES (mayor a menor):")
        print("   1. ~ (negaci√≥n)")
        print("   2. ^ (conjunci√≥n)")
        print("   3. o (disyunci√≥n)")
        print("   4. => (implicaci√≥n)")
        print("   5. <=> (bicondicional)")
    else:
        print("\n‚ùå Error en el an√°lisis sint√°ctico")
    
    pausa("Diego: Explica la gram√°tica y el AST...")

def demo_grafos():
    """Demostraci√≥n para Gerardo - Generaci√≥n de Grafos"""
    separador("DEMO 4: GENERACI√ìN Y VISUALIZACI√ìN DE GRAFOS")
    
    expresion_demo = "(p^~q)"
    
    print(f"\nüìä GENERACI√ìN DE GRAFO PARA: '{expresion_demo}'")
    
    ast, grafo = analizar_sintacticamente(expresion_demo)
    
    if grafo:
        print("\n‚úÖ Grafo generado exitosamente")
        
        # Mostrar reporte del grafo
        reporte = generar_reporte_grafo(grafo, expresion_demo)
        print(reporte)
        
        print("\nüé® CARACTER√çSTICAS DE VISUALIZACI√ìN:")
        print("   ‚Ä¢ Nodos coloreados por tipo:")
        print("     - Azul claro: Variables (p, q, r, ...)")
        print("     - Verde claro: Constantes (0, 1)")
        print("     - Rosa claro: Operadores (~, ^, o, =>, <=>)")
        print("   ‚Ä¢ Aristas direccionales con espaciado optimizado")
        print("   ‚Ä¢ Layout determin√≠stico (mismo resultado siempre)")
        print("   ‚Ä¢ Leyenda explicativa")
        
        pausa("¬øGenerar visualizaci√≥n del grafo? (Enter para s√≠)")
        
        try:
            nombre_archivo = f"demo_grafo_{limpiar_nombre_archivo(expresion_demo)}.png"
            visualizar_grafo(grafo, expresion_demo, nombre_archivo)
            print(f"\nüíæ Grafo guardado como: {nombre_archivo}")
        except Exception as e:
            print(f"\n‚ö†Ô∏è Error al visualizar: {e}")
        
        # Exportar a DOT
        try:
            archivo_dot = f"demo_grafo_{limpiar_nombre_archivo(expresion_demo)}.dot"
            exportar_grafo_dot(grafo, expresion_demo, archivo_dot)
            print(f"\nüíæ Archivo DOT generado: {archivo_dot}")
        except Exception as e:
            print(f"\n‚ö†Ô∏è Error al exportar DOT: {e}")
    
    pausa("Gerardo: Explica la visualizaci√≥n...")

def demo_automata():
    """Demostraci√≥n para Juarez - Aut√≥mata Finito"""
    separador("DEMO 5: AUT√ìMATA FINITO")
    
    print("\nü§ñ AUT√ìMATA FINITO PARA EL ALFABETO DEL SISTEMA L")
    print("\nEl aut√≥mata reconoce todos los s√≠mbolos v√°lidos del alfabeto:")
    
    # Crear el aut√≥mata
    automata, estados = crear_automata_alfabeto()
    
    print(f"\nüìä ESTADOS DEL AUT√ìMATA ({len(estados)} estados):")
    for estado, descripcion in estados.items():
        print(f"   {estado}: {descripcion}")
    
    pausa("Continuar con tabla de transiciones...")
    
    print("\nüîÑ TABLA DE TRANSICIONES:")
    generar_tabla_transiciones(automata)
    
    print("\nüí° CARACTER√çSTICAS DEL AUT√ìMATA:")
    print("   ‚Ä¢ AFD (Aut√≥mata Finito Determinista)")
    print("   ‚Ä¢ Reconoce operadores multi-car√°cter")
    print("   ‚Ä¢ Maneja todos los s√≠mbolos del alfabeto")
    print("   ‚Ä¢ Base te√≥rica para el an√°lisis l√©xico")
    
    print("\nüéØ EJEMPLO DE RECONOCIMIENTO:")
    print("   Para reconocer '=>':")
    print("   q0 --[=]--> q7 --[>]--> q8 --[Œµ]--> qf")
    
    pausa("Juarez: Explica el aut√≥mata y las transiciones...")

def demo_interfaz():
    """Demostraci√≥n para Jose - Interfaz y Funcionalidades"""
    separador("DEMO 6: INTERFAZ Y FUNCIONALIDADES")
    
    print("\nüñ•Ô∏è INTERFAZ DE USUARIO DEL SISTEMA")
    print("\nEl sistema ofrece un men√∫ interactivo con 9 opciones:")
    print("\n   1. üîç Analizar expresi√≥n completa")
    print("   2. üìù Solo an√°lisis l√©xico")
    print("   3. üå≥ Solo an√°lisis sint√°ctico")
    print("   4. üìö Mostrar gram√°tica del Sistema L")
    print("   5. ü§ñ Mostrar aut√≥mata finito del alfabeto")
    print("   6. üß™ Probar expresiones de ejemplo")
    print("   7. ‚úÖ Validar m√∫ltiples expresiones")
    print("   8. üíæ Exportar grafo en formato DOT")
    print("   9. ‚ùì Mostrar ayuda")
    print("   0. üö™ Salir")
    
    pausa("Continuar con demostraci√≥n de validaci√≥n...")
    
    print("\nüß™ DEMOSTRACI√ìN: VALIDACI√ìN DE EXPRESIONES")
    
    expresiones_test = [
        ("p", "Variable simple"),
        ("(p^q)", "Conjunci√≥n con par√©ntesis"),
        ("((p=>q)^p)", "Expresi√≥n compleja anidada"),
        ("p&q", "Expresi√≥n inv√°lida (operador no reconocido)"),
        ("(p^", "Expresi√≥n incompleta")
    ]
    
    print("\nValidando expresiones de ejemplo:")
    for expr, descripcion in expresiones_test:
        try:
            ast, grafo = analizar_sintacticamente(expr)
            estado = "‚úÖ" if ast else "‚ùå"
            print(f"   {estado} {expr:15} - {descripcion}")
        except:
            print(f"   ‚ùå {expr:15} - {descripcion}")
    
    print("\nüéØ CARACTER√çSTICAS DE LA INTERFAZ:")
    print("   ‚Ä¢ Men√∫ intuitivo y organizado")
    print("   ‚Ä¢ Validaci√≥n de entrada del usuario")
    print("   ‚Ä¢ Manejo robusto de errores")
    print("   ‚Ä¢ Retroalimentaci√≥n visual clara")
    print("   ‚Ä¢ Exportaci√≥n en m√∫ltiples formatos")
    print("   ‚Ä¢ Casos de prueba predefinidos")
    
    pausa("Jose: Explica la interfaz y funcionalidades...")

def demo_completo():
    """Ejecuta toda la demostraci√≥n"""
    print("üéì DEMOSTRACI√ìN COMPLETA DEL SISTEMA AXIOM√ÅTICO L")
    print("   Reconocedor de Expresiones Proposicionales")
    print("\nüë• Presentadores:")
    print("   ‚Ä¢ Alex - Introducci√≥n")
    print("   ‚Ä¢ Juan Diego - An√°lisis L√©xico")
    print("   ‚Ä¢ Diego - An√°lisis Sint√°ctico")
    print("   ‚Ä¢ Gerardo - Generaci√≥n de Grafos")
    print("   ‚Ä¢ Juarez - Aut√≥mata Finito")
    print("   ‚Ä¢ Jose - Interfaz y Funcionalidades")
    
    pausa("Comenzar demostraci√≥n...")
    
    # Ejecutar cada demo
    demo_introduccion()
    demo_analisis_lexico()
    demo_analisis_sintactico()
    demo_grafos()
    demo_automata()
    demo_interfaz()
    
    separador("CONCLUSI√ìN")
    print("\nüéâ DEMOSTRACI√ìN COMPLETADA")
    print("\n‚ú® El Sistema Axiom√°tico L demuestra la integraci√≥n de:")
    print("   ‚Ä¢ Teor√≠a de aut√≥matas y lenguajes formales")
    print("   ‚Ä¢ T√©cnicas de an√°lisis l√©xico y sint√°ctico")
    print("   ‚Ä¢ Visualizaci√≥n de estructuras de datos")
    print("   ‚Ä¢ Aplicaci√≥n pr√°ctica de conceptos te√≥ricos")
    
    print("\nüôè ¬°Gracias por su atenci√≥n!")
    print("\n‚ùì ¬øPreguntas?")

def menu_demo():
    """Men√∫ para seleccionar demostraciones individuales"""
    while True:
        print("\n" + "="*50)
        print("  MEN√ö DE DEMOSTRACIONES")
        print("="*50)
        print("1. Demo completa (todas las secciones)")
        print("2. Introducci√≥n (Alex)")
        print("3. An√°lisis L√©xico (Juan Diego)")
        print("4. An√°lisis Sint√°ctico (Diego)")
        print("5. Generaci√≥n de Grafos (Gerardo)")
        print("6. Aut√≥mata Finito (Juarez)")
        print("7. Interfaz y Funcionalidades (Jose)")
        print("0. Salir")
        
        opcion = input("\nSeleccione una opci√≥n: ").strip()
        
        if opcion == '0':
            print("\n¬°Hasta luego!")
            break
        elif opcion == '1':
            demo_completo()
        elif opcion == '2':
            demo_introduccion()
        elif opcion == '3':
            demo_analisis_lexico()
        elif opcion == '4':
            demo_analisis_sintactico()
        elif opcion == '5':
            demo_grafos()
        elif opcion == '6':
            demo_automata()
        elif opcion == '7':
            demo_interfaz()
        else:
            print("\n‚ùå Opci√≥n inv√°lida")

if __name__ == "__main__":
    try:
        menu_demo()
    except KeyboardInterrupt:
        print("\n\nüõë Demostraci√≥n interrumpida")
    except Exception as e:
        print(f"\n‚ùå Error durante la demostraci√≥n: {e}")